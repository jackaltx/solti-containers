---
all:
  vars:
    domain: a0a0.org
    mylab_nolog: "{{ cluster_secure_log | bool | default(true) }}"
    ansible_user: lavender
    ansible_ssh_private_key_file: ~/.ssh/id_ed25519

    # Container networking overrides
    service_network: "ct-net"
    service_dns_servers:
      - "1.1.1.1"
      - "8.8.8.8"
    service_dns_search: "{{ domain }}"

    # basically non-ssh stuff, like LXC containers
    mylab_non_ssh: false

    test_index: "test-ansible"
    test_doc: '{"message": "Verification {{ ansible_date_time.iso8601 }}"}'

  children:
    # ................................................
    mylab:
      # .........................................
      # mylab hosts
      hosts:
        firefly:
          ansible_host: "localhost"
          ansible_connection: local

      # .........................................
      # mylab vars
      vars:
        mylab_results: []

      children:
        # ========================================
        mattermost_svc:
          hosts:
            firefly:
              # host_vars

          # .......................................
          # mattermost_svc only vars
          vars:
            debug_level: warn
            mattermost_data_dir: "{{ ansible_env.HOME }}/mattermost-data"
            mattermost_delete_data: false

            test_email: "test-{{ ansible_date_time.epoch }}@example.com"
            test_username: "testuser-{{ ansible_date_time.epoch }}"
            test_password: "Test123!"

        # ========================================
        elasticsearch_svc:
          hosts:
            firefly:
              # host_vars

          # .......................................
          # _svc only vars
          vars:
            debug_level: warn
            elasticsearch_data_dir: "{{ ansible_env.HOME }}/elasticsearch-data" #
            elasticsearch_password: "{{ lookup('env', 'ELASTIC_PASSWORD', default='') }}"
            elasticsearch_delete_data: false

            elasticsearch_proxy: "https://es.a0a0.org:8443"

        # ========================================
        redis_svc:
          hosts:
            firefly:
              # host_vars

          # .......................................
          # _svc only vars
          vars:
            debug_level: warn
            redis_data_dir: "{{ ansible_env.HOME }}/redis-data"
            redis_password: "{{ lookup('env', 'REDIS_PASSWORD', default='') }}"
            redis_delete_data: false

            test_key: "test:ansible"
            test_value: "Verification {{ ansible_date_time.iso8601 }}"

        # ========================================
        hashivault_svc:
          hosts:
            firefly:
              # host_vars

          # .......................................
          # _svc only vars
          vars:
            debug_level: warn
            vault_data_dir: "{{ ansible_env.HOME }}/vault-data"

            # .......................................
            # Initialize vars
            # .......................................

            # Initialization parameters
            vault_init_required: true # Set to false to skip initialization if already done
            vault_key_shares: 5 # Number of key shares to split the master key into
            vault_key_threshold: 3 # Number of key shares needed to reconstruct the master key

            # Secure storage options
            vault_keys_output_dir: "{{ ansible_env.HOME }}/.secrets/vault-secrets"
            vault_keys_backup: true # Whether to create a backup copy

            # For demonstration only - in production use ansible-vault or a secrets manager
            vault_unseal_now: true # Whether to unseal the vault immediately

            # Vault connection details
            vault_addr: "http://localhost:8200"

            # Secret engines to enable
            vault_enable_transit: true # Encryption as a service
            vault_enable_pki: true # Certificate authority
            vault_enable_ssh: true # SSH key signing

            # .......................................
            # Setup secrets
            # .......................................

            # Environment variable secrets to store in Vault
            # If these variables are not set, use dummy values (for development only)
            vault_initial_secrets:
              - path: "kv/ansible/vault"
                data:
                  provision_vault_password: "{{ lookup('env', 'PROVISION_VAULT_PASSWORD') | default('changeme_in_production') }}"

              - path: "kv/services/elasticsearch"
                data:
                  elastic_password: "{{ lookup('env', 'ELASTIC_PASSWORD') | default('changeme_in_production') }}"
                  es_ro_token: "{{ lookup('env', 'ES_RO_TOKEN') | default('changeme_in_production') }}"
                  es_rw_token: "{{ lookup('env', 'ES_RW_TOKEN') | default('changeme_in_production') }}"

              - path: "kv/services/mattermost"
                data:
                  mm_db_password: "{{ lookup('env', 'MM_DB_PASSWORD') | default('changeme_in_production') }}"

              - path: "kv/services/redis"
                data:
                  redis_password: "{{ lookup('env', 'REDIS_PASSWORD') | default('changeme_in_production') }}"

              - path: "kv/providers/linode"
                data:
                  linode_token: "{{ lookup('env', 'LINODE_TOKEN') | default('changeme_in_production') }}"

              - path: "kv/providers/proxmox"
                data:
                  proxmox_url: "{{ lookup('env', 'PROXMOX_URL') | default('https://proxmox.example.com:8006/api2/json') }}"
                  proxmox_user: "{{ lookup('env', 'PROXMOX_USER') | default('root@pam') }}"
                  proxmox_node: "{{ lookup('env', 'PROXMOX_NODE') | default('proxmox') }}"
                  proxmox_token_id: "{{ lookup('env', 'PROXMOX_TOKEN_ID') | default('changeme_in_production') }}"
                  proxmox_token_secret: "{{ lookup('env', 'PROXMOX_TOKEN_SECRET') | default('changeme_in_production') }}"

              - path: "kv/providers/gitea"
                data:
                  gitea_token: "{{ lookup('env', 'GITEA_TOKEN') | default('changeme_in_production') }}"

            # PKI settings (if enabled)
            vault_pki_common_name: "solti.local"
            vault_pki_max_ttl: "87600h" # 10 years

            # .......................................
            # Configure vars
            # .......................................

            # Load the root token from init file
            vault_keys_dir: "{{ ansible_env.HOME }}/.secrets/vault-secrets"
            vault_keys_file: "{{ vault_keys_dir }}/vault-keys.json"

            # Configuration options
            vault_enable_approle: true
            vault_enable_userpass: true
            vault_admin_username: "admin"
            vault_admin_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits,!@#%^&*()_-+=') }}"

            vault_policies:
              - name: "admin"
                rules: |
                  # Admin policy
                  path "auth/*" {
                    capabilities = ["create", "read", "update", "delete", "list", "sudo"]
                  }

                  path "sys/*" {
                    capabilities = ["create", "read", "update", "delete", "list", "sudo"]
                  }

                  path "identity/*" {
                    capabilities = ["create", "read", "update", "delete", "list"]
                  }

                  path "*" {
                    capabilities = ["create", "read", "update", "delete", "list"]
                  }

              - name: "readonly"
                rules: |
                  # Read-only policy
                  path "secret/*" {
                    capabilities = ["read", "list"]
                  }

                  path "kv/*" {
                    capabilities = ["read", "list"]
                  }

        # ========================================
        traefik_svc:
          hosts:
            firefly:
              # host_vars

          # .......................................
          # _svc only vars
          vars:
            debug_level: warn
            traefik_dashboard_enabled: true
            traefik_data_dir: "{{ ansible_env.HOME }}/traefik-data"

            traefik_force_reload: false
            traefik_delete_data: false

        # ========================================
        minio_svc:
          hosts:
            firefly:
              # Optional host-specific minio vars can go here
              minio_api_port: 9000
              minio_console_port: 9001

          # .......................................
          # _svc only vars
          vars:
            debug_level: warn
            minio_dashboard_enabled: true
            minio_data_dir: "{{ ansible_env.HOME }}/minio-data"

            minio_delete_data: false

            # MinIO credentials
            # NOTE: These would be read from HashiVault in production
            minio_root_user: "minio_admin"
            minio_root_password: "secure_password_changeme"

            # MinIO bucket configuration
            minio_buckets:
              - name: "app-data"
                policy: "download"
              - name: "backups"
                policy: "none"
              - name: "logs"
                policy: "download"
              - name: "config"
                policy: "none"
              - name: "media"
                policy: "download"

            # MinIO user configuration
            minio_users:
              - username: "app-user"
                password: "app-password-changeme"
                policy: "readwrite"
                comment: "Application service user"
              - username: "backup-user"
                password: "backup-password-changeme"
                policy: "readonly"
                comment: "Backup automation user"
              - username: "ci-user"
                password: "ci-password-changeme"
                policy: "readwrite"
                comment: "CI/CD pipeline user"

            # Enable versioning on these buckets
            minio_enable_versioning:
              - bucket: "app-data"
                status: "Enabled"
              - bucket: "backups"
                status: "Enabled"
              - bucket: "config"
                status: "Enabled"
