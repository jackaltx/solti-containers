---
- name: Verify Mattermost deployment
  hosts: all
  tasks:
    # Check systemd services
    - name: Verify systemd services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        scope: user
      register: service_status
      failed_when: service_status.status.ActiveState != "active"
      loop:
        - pod-mattermost

    # Check podman resources
    - name: Check podman pod status
      ansible.builtin.command: podman pod inspect mattermost
      register: pod_status
      changed_when: false
      failed_when: pod_status.rc != 0

    - name: Get container status
      ansible.builtin.shell: podman ps --format {% raw %}"{{.Names}}"{% endraw %} --filter "pod=mattermost"
      register: container_list
      changed_when: false

    - name: Verify required containers are running
      ansible.builtin.assert:
        that:
          - "'mattermost-db' in container_list.stdout"
          # Don't check for mattermost-svc as it might have a different name pattern
          - container_list.stdout_lines | length >= 2 # At least infra and db containers
        fail_msg: "Required containers are not running"

    # Check port availability
    - name: Wait for Mattermost port to be available
      ansible.builtin.wait_for:
        port: "{{ mattermost_port | default(8065) }}"
        timeout: 30
        host: "127.0.0.1"

    # Check PostgreSQL connection
    - name: Check PostgreSQL connection from Mattermost container
      ansible.builtin.command: >
        podman exec mattermost-db 
        psql -U {{ mattermost_db_user | default('mmuser') }} 
        -d {{ mattermost_db_name | default('mattermost') }} 
        -c "\l"
      register: db_check
      changed_when: false
      failed_when: db_check.rc != 0

    # Network diagnostic tasks
    - name: Get network status for Mattermost port
      ansible.builtin.command: "ss -tlnp | grep {{ mattermost_port | default(8065) }}"
      register: port_status
      changed_when: false
      failed_when: false

    - name: Display network status
      ansible.builtin.debug:
        var: port_status.stdout_lines

    - name: Get container logs
      ansible.builtin.command: "podman logs mattermost-svc"
      register: container_logs
      changed_when: false
      failed_when: false

    # Check Mattermost API health with more resilience
    - name: Check Mattermost API health endpoint
      ansible.builtin.uri:
        url: "http://127.0.0.1:{{ mattermost_port | default(8065) }}/api/v4/system/ping"
        method: GET
        status_code: 200
        validate_certs: false
        follow_redirects: all
        timeout: 30
      register: health_check
      retries: 6
      delay: 10
      until: health_check.status == 200
      ignore_errors: true

    - name: Display health check results
      ansible.builtin.debug:
        var: health_check
      when: health_check is defined

    - name: Display recent container logs on health check failure
      ansible.builtin.debug:
        msg: "{{ container_logs.stdout_lines[-20:] }}"
      when: health_check.failed is defined and health_check.failed

    # Directory checks
    - name: Verify required directories exist with correct permissions
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/{{ item.path }}"
      register: dir_check
      failed_when: >
        not dir_check.stat.exists or 
        dir_check.stat.mode != item.mode
      loop:
        - { path: "mattermost-data/config", mode: "0750" }
        - { path: "mattermost-data/data", mode: "0750" }
        - { path: "mattermost-data/logs", mode: "0750" }
        - { path: "mattermost-data/plugins", mode: "0750" }
        - { path: "mattermost-data/client/plugins", mode: "0750" }
        - { path: "mattermost-data/postgres", mode: "0700" }

    # Config file check
    - name: Verify config file exists and is valid JSON
      block:
        - name: Read config file
          ansible.builtin.slurp:
            src: "{{ ansible_env.HOME }}/mattermost-data/config/config.json"
          register: config_content

        - name: Parse config JSON
          ansible.builtin.set_fact:
            config_json: "{{ config_content.content | b64decode | from_json }}"

        - name: Verify required config settings
          ansible.builtin.assert:
            that:
              - config_json.ServiceSettings is defined
              - config_json.TeamSettings is defined
              - config_json.SqlSettings is defined
              - config_json.LogSettings is defined
            fail_msg: "Mattermost config file is missing required sections"
