---
# vault-setup-secrets.yml
# This playbook configures commonly needed secret backends and initial secrets

- name: Configure Vault Secret Engines and Add Initial Secrets
  hosts: hashivault_svc
  vars:
    # Vault connection details
    vault_addr: "http://localhost:8200"
    
    # Load the token from init file
    vault_keys_dir: "{{ ansible_env.HOME }}/vault-secrets"
    vault_keys_file: "{{ vault_keys_dir }}/vault-keys.json"
    
    # Secret engines to enable
    vault_enable_transit: true    # Encryption as a service
    vault_enable_pki: true        # Certificate authority
    vault_enable_ssh: true        # SSH key signing
    
    # Example initial secrets
    vault_initial_secrets:
      - path: "kv/databases/postgres"
        data:
          username: "postgres_user"
          password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
      
      - path: "kv/services/mattermost"
        data:
          admin_username: "mmadmin"
          admin_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits,punctuation') }}"
          db_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
      
      - path: "kv/services/elasticsearch"
        data:
          elastic_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
    
    # PKI settings (if enabled)
    vault_pki_common_name: "solti.local"
    vault_pki_max_ttl: "87600h"  # 10 years
  
  tasks:
    # Load the root token
    - name: Check if keys file exists
      stat:
        path: "{{ vault_keys_file }}"
      register: keys_file_stat
    
    - name: Fail if keys file doesn't exist
      fail:
        msg: "Vault keys file not found. Please run the initialization playbook first."
      when: not keys_file_stat.stat.exists
    
    - name: Load Vault root token
      block:
        - name: Read keys file
          slurp:
            src: "{{ vault_keys_file }}"
          register: encoded_keys
        
        - name: Extract root token
          set_fact:
            vault_token: "{{ (encoded_keys['content'] | b64decode | from_json).root_token }}"
          no_log: true
    
    # Enable Transit secrets engine (Encryption as a Service)
    - name: Enable Transit secrets engine
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault secrets enable transit
      register: transit_result
      failed_when: 
        - transit_result.rc != 0 
        - "'path is already in use' not in transit_result.stderr"
      changed_when: transit_result.rc == 0 and "'path is already in use' not in transit_result.stderr"
      when: vault_enable_transit
    
    - name: Create transit encryption key
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault write -f transit/keys/data-encryption
      register: transit_key_result
      failed_when: 
        - transit_key_result.rc != 0 
        - "'already exists' not in transit_key_result.stderr"
      changed_when: transit_key_result.rc == 0 and "'already exists' not in transit_key_result.stderr"
      when: vault_enable_transit
    
    # Enable PKI secrets engine
    - name: Enable PKI secrets engine
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault secrets enable pki
      register: pki_result
      failed_when: 
        - pki_result.rc != 0 
        - "'path is already in use' not in pki_result.stderr"
      changed_when: pki_result.rc == 0 and "'path is already in use' not in pki_result.stderr"
      when: vault_enable_pki
    
    - name: Configure PKI max TTL
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault secrets tune -max-lease-ttl={{ vault_pki_max_ttl }} pki
      when: vault_enable_pki
    
    - name: Generate root certificate
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault write -field=certificate pki/root/generate/internal 
        common_name="{{ vault_pki_common_name }} CA"
        ttl={{ vault_pki_max_ttl }}
      register: root_cert
      failed_when: 
        - root_cert.rc != 0
        # Allow failure if we've already generated a cert
        - "'root certificate installed' not in root_cert.stderr"
      changed_when: root_cert.rc == 0
      when: vault_enable_pki
    
    - name: Configure PKI URLs
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault write pki/config/urls
        issuing_certificates="{{ vault_addr }}/v1/pki/ca"
        crl_distribution_points="{{ vault_addr }}/v1/pki/crl"
      when: vault_enable_pki
    
    - name: Create PKI role
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault write pki/roles/server
        allowed_domains="{{ vault_pki_common_name }}"
        allow_subdomains=true
        max_ttl="8760h"
      when: vault_enable_pki
    
    # Enable SSH secrets engine
    - name: Enable SSH secrets engine
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault secrets enable ssh
      register: ssh_result
      failed_when: 
        - ssh_result.rc != 0 
        - "'path is already in use' not in ssh_result.stderr"
      changed_when: ssh_result.rc == 0 and "'path is already in use' not in ssh_result.stderr"
      when: vault_enable_ssh
    
    # Create initial secrets
    - name: Add initial secrets
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault kv put {{ item.path }} {{ data_params }}
      vars:
        data_params: "{{ item.data | dict2items | map('regex_replace', '^(.*)$', '\\1=\"{{ item.data[\"\\1\"] }}\"') | join(' ') }}"
      loop: "{{ vault_initial_secrets }}"
      no_log: true
    
    # Output next steps
    - name: Summarize configuration
      debug:
        msg:
          - "=============================================================="
          - "HashiVault secret engines configured successfully!"
          - ""
          - "Enabled Secret Engines:"
          - "- KV Version 2 for general secrets"
          - "{{ '- Transit for encryption services' if vault_enable_transit else '' }}"
          - "{{ '- PKI for certificate management' if vault_enable_pki else '' }}"
          - "{{ '- SSH for SSH key signing' if vault_enable_ssh else '' }}"
          - ""
          - "Initial secrets created:"
          - "{% for secret in vault_initial_secrets %}- {{ secret.path }}{% endfor %}"
          - ""
          - "You can now use these secrets in your application configurations"
          - "or retrieve them using Vault's API or CLI."
          - "=============================================================="
