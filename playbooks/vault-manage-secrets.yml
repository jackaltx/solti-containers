---
# manage-vault-secrets.yml
# This playbook shows how to rotate and manage secrets in HashiVault

- name: Manage and Rotate HashiVault Secrets
  hosts: hashivault_svc
  vars:
    # Vault connection details
    vault_addr: "http://localhost:8200"
    
    # Load the token from init file
    vault_keys_dir: "{{ ansible_env.HOME }}/vault-secrets"
    vault_keys_file: "{{ vault_keys_dir }}/vault-keys.json"
    
    # Secret rotation configuration
    secrets_to_rotate:
      - path: "kv/services/elasticsearch"
        key: "elastic_password"
        new_value: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
      
      - path: "kv/services/mattermost"
        key: "mm_db_password"
        new_value: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
      
      - path: "kv/services/redis"
        key: "redis_password"
        new_value: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
    
    # New secrets to add
    new_secrets:
      - path: "kv/services/grafana"
        data:
          admin_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
          secret_key: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,punctuation') }}"
    
    # Services to restart after secret rotation
    services_to_restart:
      - name: "elasticsearch-pod"
        hosts: "elasticsearch_svc"
        secret_path: "kv/services/elasticsearch"
      
      - name: "mattermost-pod"
        hosts: "mattermost_svc"
        secret_path: "kv/services/mattermost"
      
      - name: "redis-pod"
        hosts: "redis_svc"
        secret_path: "kv/services/redis"
  
  tasks:
    # Load the vault token
    - name: Check if keys file exists
      stat:
        path: "{{ vault_keys_file }}"
      register: keys_file_stat
    
    - name: Fail if keys file doesn't exist
      fail:
        msg: "Vault keys file not found. Please run the initialization playbook first."
      when: not keys_file_stat.stat.exists
    
    - name: Load Vault root token
      block:
        - name: Read keys file
          slurp:
            src: "{{ vault_keys_file }}"
          register: encoded_keys
        
        - name: Extract root token
          set_fact:
            vault_token: "{{ (encoded_keys['content'] | b64decode | from_json).root_token }}"
          no_log: true
    
    # Rotate selected secrets
    - name: Rotate secrets
      block:
        - name: Get current secret version
          command: >
            podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
            vault kv get -format=json {{ item.path }}
          register: current_secret
          loop: "{{ secrets_to_rotate }}"
          no_log: true
        
        - name: Parse current secrets
          set_fact:
            current_data: "{{ current_secret.results | map(attribute='stdout') | map('from_json') | map(attribute='data.data') | list }}"
          no_log: true
        
        - name: Update secrets with new values
          command: >
            podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
            vault kv put {{ secrets_to_rotate[idx].path }} 
            {{ current_data[idx] | combine({secrets_to_rotate[idx].key: secrets_to_rotate[idx].new_value}) | dict2items | map('regex_replace', '^(.*)$', '\\1=\"{{ current_data[idx] | combine({secrets_to_rotate[idx].key: secrets_to_rotate[idx].new_value})[\"\\1\"] }}\"') | join(' ') }}
          loop: "{{ range(0, secrets_to_rotate | length) | list }}"
          loop_control:
            index_var: idx
            label: "{{ secrets_to_rotate[idx].path }}:{{ secrets_to_rotate[idx].key }}"
          no_log: true
        
        - name: Record rotated secrets for service restart
          set_fact:
            rotated_paths: "{{ secrets_to_rotate | map(attribute='path') | list | unique }}"
          no_log: true
    
    # Add new secrets
    - name: Add new secrets
      command: >
        podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
        vault kv put {{ item.path }} {{ item.data | dict2items | map('regex_replace', '^(.*)$', '\\1=\"{{ item.data[\"\\1\"] }}\"') | join(' ') }}
      loop: "{{ new_secrets }}"
      no_log: true
    
    # Generate a report of changes (safe to show)
    - name: Generate changes report
      set_fact:
        secrets_report:
          rotated:
            - "{{ secrets_to_rotate | map(attribute='path') | zip(secrets_to_rotate | map(attribute='key')) | map('join', ':') | list }}"
          added:
            - "{{ new_secrets | map(attribute='path') | list }}"
    
    - name: Show changes report
      debug:
        msg:
          - "=============================================================="
          - "HashiVault Secret Management Report"
          - ""
          - "Rotated Secrets:"
          - "{% for secret in secrets_to_rotate %}  - {{ secret.path }}:{{ secret.key }}{% endfor %}"
          - ""
          - "New Secrets Added:"
          - "{% for secret in new_secrets %}  - {{ secret.path }}{% endfor %}"
          - ""
          - "Services that need to be restarted:"
          - "{% for svc in services_to_restart %}{% if svc.secret_path in rotated_paths %}  - {{ svc.name }} on {{ svc.hosts }}{% endif %}{% endfor %}"
          - "=============================================================="

# Restart services that use rotated secrets
- name: Restart Services with Rotated Secrets
  hosts: "{{ item.hosts }}"
  vars:
    rotated_paths: "{{ hostvars[groups['hashivault_svc'][0]].rotated_paths | default([]) }}"
  tasks:
    - name: Restart service if its secrets were rotated
      systemd:
        name: "{{ item.name }}"
        state: restarted
        scope: user
      when: item.secret_path in rotated_paths
  loop: "{{ hostvars[groups['hashivault_svc'][0]].services_to_restart }}"
  loop_control:
    label: "{{ item.name }} on {{ inventory_hostname }}"
