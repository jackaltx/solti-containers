#
# prepare-hashivault.yml - Run with ansible-playbook -K prepare-hashivault.yml
#
---
- name: Prepare system for HashiVault deployment
  hosts: hashivault_svc
  vars:
    vault_data_dir: "{{ ansible_env.HOME }}/vault-data"

  tasks:
    #
    # ==========================================================
    # These tasks run as the regular user

    # once you have deployed, this will fail!
    #
    - name: Create Vault directories
      file:
        path: "{{ vault_data_dir }}/{{ item }}"
        state: directory
        mode: "0750"
      loop:
        - "" # Base directory
        - config
        - data
        - logs
        - tls

    # ==========================================================
    # These tasks require root

    # ...........................................................................
    - name: Perform system-level tasks
      become: true
      block:
        #
        # ...........................................................
        # RHEL/CentOS specific tasks
        #
        - name: Configure RHEL repositories
          when: ansible_os_family == "RedHat"
          block:
            - name: Set SELinux context for Mattermost directories
              ansible.builtin.command: chcon -Rt container_file_t {{ mattermost_data_dir }}

            - name: Enable CRB repository
              rhsm_repository:
                name: codeready-builder-for-rhel-9-x86_64-rpms
                state: enabled
              when: ansible_distribution_major_version == "9"

        # ...........................................................
        # Debian/Ubuntu specific tasks
        - name: Configure Debian prerequisites
          when: ansible_os_family == "Debian"
          block:
            - name: Install required dependencies
              apt:
                name:
                  - apt-transport-https
                  - ca-certificates
                  - curl
                  - gnupg
                  - python3-pip
                state: present
                update_cache: yes

            - name: Install podman-compose via pip
              pip:
                name: podman-compose
                state: present

        # ...........................................................
        # Common tasks for all distributions
        - name: Install required packages
          package:
            name: "{{ packages }}"
            state: present
          vars:
            packages:
              - podman
              - "{{ 'podman-compose' if ansible_os_family == 'RedHat' else '' }}"
          register: package_result
          until: package_result is success
          retries: 3
          delay: 5

        # .................................................................
        - name: Enable lingering for user
          command: "loginctl enable-linger {{ ansible_user_id }}"
          changed_when: false

        # .................................................................
        - name: Configure container DNS
          block:
            - name: Create containers configuration directory
              file:
                path: "{{ ansible_env.HOME }}/.config/containers"
                state: directory
                mode: "0755"

            - name: Configure DNS in containers.conf
              copy:
                dest: "{{ ansible_env.HOME }}/.config/containers/containers.conf"
                content: |
                  [containers]
                  dns_servers = ["1.1.1.1", "8.8.8.8"]
                mode: "0644"

        # .................................................................
        - name: Configure SELinux
          block:
            - name: Install SELinux policy tools
              package:
                name:
                  - policycoreutils-python-utils
                state: present

            - name: Set SELinux context for vault directories
              sefcontext:
                target: "{{ vault_data_dir }}(/.*)?"
                setype: container_file_t
                state: present

            - name: Apply SELinux context
              command: restorecon -Rv "{{ vault_data_dir }}"
              register: restorecon_result
              changed_when: restorecon_result.rc == 0
          when:
            - ansible_os_family == "RedHat"
            - ansible_selinux.status is defined
            - ansible_selinux.status == "enabled"
