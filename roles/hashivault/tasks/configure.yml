---
# vault-configure.yml
# This playbook configures an initialized and unsealed HashiVault instance

# ..............................................
# Load the root token
- name: Check if keys file exists
  stat:
    path: "{{ vault_keys_file }}"
  register: keys_file_stat

- name: Fail if keys file doesn't exist
  fail:
    msg: "Vault keys file not found. Please run the initialization playbook first."
  when: not keys_file_stat.stat.exists

- name: Load Vault root token
  block:
    - name: Read keys file
      slurp:
        src: "{{ vault_keys_file }}"
      register: encoded_keys

    - name: Extract root token
      set_fact:
        vault_token: "{{ (encoded_keys['content'] | b64decode | from_json).root_token }}"
      no_log: true

# ..............................................
# Determine the correct container name
- name: Check container name
  command: podman ps --format {% raw %}"{{.Names}}"{% endraw %} --filter "pod=vault"
  register: container_list
  changed_when: false

- name: Set container name fact
  set_fact:
    vault_container_name: "{{ 'vault-svc' if 'vault-svc' in container_list.stdout else 'vault-server' if 'vault-server' in container_list.stdout else 'vault' }}"

- name: Debug container name
  debug:
    msg: "Using vault container name: {{ vault_container_name }}"

# ..............................................
# Create temp token file for authentication (will be removed after use)
# - name: Create temporary token file
#   copy:
#     content: "{{ vault_token }}"
#     dest: "/tmp/vault_token"
#     mode: "0600"
#   no_log: true

# ..............................................
# ..............................................
# ..............................................
# ..............................................
# ..............................................
# Create policies

- name: Debug policies
  debug:
    var: vault_policies

# Create policies - using shell module with echo to properly pass the policy content
- name: Create Vault policies
  shell: |
    echo '{{ item.rules }}' | podman exec -i -e VAULT_TOKEN={{ vault_token }} {{ vault_container_name }} vault policy write {{ item.name }} -
  loop: "{{ vault_policies }}"
  register: policy_result
  changed_when: policy_result.rc == 0

# ..............................................
# Enable userpass auth if requested
- name: Enable userpass authentication
  command: >
    podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
    vault auth enable userpass
  register: userpass_result
  failed_when:
    - userpass_result.rc != 0
    - "'path is already in use' not in userpass_result.stderr"
  changed_when: userpass_result.rc == 0 and "'path is already in use' not in userpass_result.stderr"
  when: vault_enable_userpass

# ..............................................
# Create admin user
- name: Create admin user
  command: >
    podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
    vault write auth/userpass/users/{{ vault_admin_username }} 
    password={{ vault_admin_password }}
    policies=admin
  register: admin_user_result
  changed_when: admin_user_result.rc == 0
  when: vault_enable_userpass
  no_log: true

# ..............................................
# Enable AppRole auth if requested
- name: Enable AppRole authentication
  command: >
    podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
    vault auth enable approle
  register: approle_result
  failed_when:
    - approle_result.rc != 0
    - "'path is already in use' not in approle_result.stderr"
  changed_when: approle_result.rc == 0 and "'path is already in use' not in approle_result.stderr"
  when: vault_enable_approle

# ..............................................
# Enable secrets engines
- name: Enable KV secrets engine version 2
  command: >
    podman exec -e VAULT_TOKEN={{ vault_token }} vault-svc
    vault secrets enable -version=2 kv
  register: kv_result
  failed_when:
    - kv_result.rc != 0
    - "'path is already in use' not in kv_result.stderr"
  changed_when: kv_result.rc == 0 and "'path is already in use' not in kv_result.stderr"

# ..............................................
# Save admin credentials to file
- name: Save admin credentials to file
  copy:
    content: |
      # HashiVault Admin Credentials
      # Generated by Ansible on {{ ansible_date_time.iso8601 }}

      URL: {{ vault_addr }}
      Username: {{ vault_admin_username }}
      Password: {{ vault_admin_password }}

      # For API access, use the following token:
      VAULT_TOKEN={{ vault_token }}
    dest: "{{ vault_keys_dir }}/vault-admin-credentials.txt"
    mode: "0600"
  when: vault_enable_userpass
  no_log: true

# ..............................................
# Clean up temporary token file
- name: Remove temporary token file
  file:
    path: "/tmp/vault_token"
    state: absent

# ..............................................
# Output next steps
- name: Display admin credentials and next steps
  debug:
    msg:
      - "=============================================================="
      - "HashiVault has been configured successfully!"
      - ""
      - "Admin username: {{ vault_admin_username }}"
      - "Admin password: {{ '[saved to file]' }}"
      - ""
      - "These credentials have been saved to:"
      - "{{ vault_keys_dir }}/vault-admin-credentials.txt"
      - ""
      - "Next steps:"
      - "1. Access the Vault UI at: {{ vault_addr }}/ui"
      - "2. Log in with the admin credentials"
      - "3. Create application-specific roles and policies"
      - "4. Store your sensitive secrets"
      - "=============================================================="
  when: vault_enable_userpass
