---
#
# ..........................................................
- name: Ensure pod is removed if it exists
  containers.podman.podman_pod:
    name: mattermost
    state: absent
  ignore_errors: true

# ..........................................................
# First ensure DNS configuration
- name: Ensure containers.conf directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.config/containers"
    state: directory
    mode: "0750"

- name: Configure container DNS
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.config/containers/containers.conf"
    content: |
      [containers]
      dns_servers = ["1.1.1.1", "8.8.8.8"]
    mode: "0644"

# ..........................................................
- name: Create Mattermost pod
  containers.podman.podman_pod:
    name: mattermost
    ports:
      - "127.0.0.1:{{ mattermost_port }}:8065"

- name: Wait for pod creation
  ansible.builtin.pause:
    seconds: 5

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- name: Verify pod status
  ansible.builtin.command: podman pod inspect mattermost
  register: pod_status
  changed_when: false

# ..........................................................
- name: Deploy PostgreSQL container
  containers.podman.podman_container:
    name: mattermost-db
    pod: mattermost
    image: "{{ mattermost_postgres_image }}"
    state: started
    volume:
      - "{{ mattermost_data_dir }}/postgres:/var/lib/postgresql/data:Z"
    env:
      POSTGRES_USER: "{{ mattermost_db_user }}"
      POSTGRES_PASSWORD: "{{ mattermost_postgres_password }}"
      POSTGRES_DB: "{{ mattermost_db_name }}"
    restart_policy: always

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- name: Verify PostgreSQL container status
  ansible.builtin.command: podman inspect mattermost-db
  register: postgres_status
  changed_when: false

# ..........................................................
- name: Wait for PostgreSQL to initialize
  ansible.builtin.pause:
    seconds: 10
  when:
    - not ansible_check_mode

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- name: Verify pod still exists
  ansible.builtin.command: podman pod inspect mattermost
  register: pod_status_before_mattermost
  changed_when: false

# ..........................................................
- name: Deploy Mattermost container
  containers.podman.podman_container:
    name: mattermost-svc
    pod: mattermost
    image: "{{ mattermost_image }}"
    state: started
    security_opt:
      - label=disable
    volume:
      - "{{ mattermost_data_dir }}/config:/mattermost/config:Z"
      - "{{ mattermost_data_dir }}/data:/mattermost/data:Z"
      - "{{ mattermost_data_dir }}/logs:/mattermost/logs:Z"
      - "{{ mattermost_data_dir }}/plugins:/mattermost/plugins:Z"
      - "{{ mattermost_data_dir }}/client/plugins:/mattermost/client/plugins:Z"
    env:
      MM_USERNAME: "{{ mattermost_db_user }}"
      MM_PASSWORD: "{{ mattermost_postgres_password }}"
      MM_DBNAME: "{{ mattermost_db_name }}"
      MM_SQLSETTINGS_DRIVERNAME: "postgres"
      MM_SQLSETTINGS_DATASOURCE: "postgres://{{ mattermost_db_user }}:{{ mattermost_postgres_password }}@mattermost-db:5432/{{ mattermost_db_name }}?sslmode=disable"
    restart_policy: always
#
#  note: claude insists on adding depend_on:, but that is not valid
#

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- name: Verify container statuses
  ansible.builtin.command: podman ps --format {% raw %}"{{.Names}}"{% endraw %} --filter "pod=mattermost"
  register: container_status
  changed_when: false
  failed_when: >
    'mattermost-db' not in container_status.stdout or
    'mattermost-svc' not in container_status.stdout
