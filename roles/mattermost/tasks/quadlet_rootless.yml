---
#
# ..................................................................................
# TODO  this should be part of _base
- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: directory
    mode: "0750"
  loop:
    - .config/systemd/user
    - .config/containers/systemd
    - .config/containers/systemd/env

# ..................................................................................
# TODO  is thos part of prerequisites??
- name: Create environment file for database secrets
  ansible.builtin.template:
    src: mattermost-db.env.j2
    dest: "{{ ansible_env.HOME }}/.config/containers/systemd/env/mattermost-db.env"
    mode: "0600"

# ..................................................................................
- name: Create Mattermost pod Quadlet
  containers.podman.podman_pod:
    name: mattermost
    state: quadlet
    dns: "{{ service_dns_servers }}"
    dns_search: "{{ service_dns_search }}"
    network: "{{ service_network }}"
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    ports:
      - "127.0.0.1:{{ mattermost_port }}:8065"
    quadlet_options:
      - |
        [Service]
        Restart=always
        Type=forking
        RemainAfterExit=yes
        TimeoutStartSec=300
      - |
        [Install]
        WantedBy=default.target

# ..................................................................................
- name: Create PostgreSQL container Quadlet
  containers.podman.podman_container:
    name: mattermost-db
    pod: mattermost.pod
    image: "{{ mattermost_postgres_image }}"
    state: quadlet
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    volume:
      - "{{ mattermost_data_dir }}/postgres:/var/lib/postgresql/data:Z"
    quadlet_options:
      - "EnvironmentFile={{ ansible_env.HOME }}/.config/containers/systemd/env/mattermost-db.env"
      - |
        [Unit]
        Description=Mattermost Database Container
        After=network-online.target
      - |
        [Service]
        Restart=always
        TimeoutStartSec=300
        TimeoutStopSec=70
      - |
        [Install]
        WantedBy=default.target

# ..................................................................................
- name: Create Mattermost container Quadlet
  containers.podman.podman_container:
    name: mattermost-svc
    pod: mattermost.pod
    image: "{{ mattermost_image }}"
    state: quadlet
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    volume:
      - "{{ mattermost_data_dir }}/config:/mattermost/config:Z,U"
      - "{{ mattermost_data_dir }}/data:/mattermost/data:Z,U"
      - "{{ mattermost_data_dir }}/logs:/mattermost/logs:Z,U"
      - "{{ mattermost_data_dir }}/plugins:/mattermost/plugins:Z,U"
      - "{{ mattermost_data_dir }}/client/plugins:/mattermost/client/plugins:Z,U"
      - "{{ mattermost_data_dir }}/bleve-indexes:/mattermost/bleve-indexes:Z,U"
    env:
      MM_USERNAME: "{{ mattermost_db_user }}"
      MM_PASSWORD: "{{ mattermost_postgres_password }}"
      MM_DBNAME: "{{ mattermost_db_name }}"
      MM_SQLSETTINGS_DRIVERNAME: "postgres"
      MM_SQLSETTINGS_DATASOURCE: "postgres://{{ mattermost_db_user }}:{{ mattermost_postgres_password }}@mattermost-db:5432/{{ mattermost_db_name }}?sslmode=disable"
    security_opt:
      - label=disable
    quadlet_options:
      - "Label=traefik.enable=true"
      - "Label=traefik.http.routers.mattermost.rule=Host(`mattermost.a0a0.org`)"
      - "Label=traefik.http.routers.mattermost.entrypoints=web,websecure"
      - "Label=traefik.http.services.mattermost.loadbalancer.server.port=8065"
      - "User=2000:2000"
      - |
        [Unit]
        Description=Mattermost Application Container
        After=network-online.target
      - |
        [Service]
        Restart=always
        TimeoutStartSec=300
        TimeoutStopSec=70
      - |
        [Install]
        WantedBy=default.target

# .......................................................................................
- name: reload systemd user daemon
  ansible.builtin.systemd:
    daemon_reload: yes
    scope: user

# .......................................................................................
- name: Enable and start rootless pod with systemd
  ansible.builtin.systemd:
    name: "{{ mattermost_service_name }}"
    state: started
    enabled: yes
    scope: user
