---
# Clean Traefik verification - focuses on key info only
# Usage: ./svc-exec.sh traefik verify

- name: Check Traefik API
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/version"
    method: GET
    status_code: 200
  register: api_check
  ignore_errors: true

- name: Get routing data
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/{{ item }}"
    method: GET
    status_code: 200
  register: traefik_data
  loop:
    - http/routers
    - http/services
  when: api_check.status == 200
  ignore_errors: true

- name: Extract active routes
  set_fact:
    active_routes: "{{ traefik_data.results[0].json | selectattr('provider', 'equalto', 'docker') | selectattr('status', 'equalto', 'enabled') | list }}"
    docker_services: "{{ traefik_data.results[1].json | selectattr('provider', 'equalto', 'docker') | list }}"
  when: traefik_data.results is defined

- name: Show status
  debug:
    msg:
      - "🚀 TRAEFIK STATUS"
      - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      - "API: {{ '✅ ONLINE' if api_check.status == 200 else '❌ OFFLINE' }}"
      - "Version: {{ api_check.json.Version if api_check.json is defined else 'Unknown' }}"
      - "Dashboard: http://localhost:{{ traefik_dashboard_port }}"
      - "Routes: {{ active_routes | length if active_routes is defined else 0 }}"
      - "Services: {{ docker_services | length if docker_services is defined else 0 }}"
      - ""

- name: Build route list
  set_fact:
    route_list: "{{ route_list | default([]) + [item.rule | regex_replace('Host\\(`([^`]+)`\\)', '\\1') + ' ➜ ' + item.service] }}"
  loop: "{{ active_routes | default([]) }}"
  when: item.rule.startswith('Host(')

- name: Show routes
  debug:
    msg: "{{ route_list | default(['No routes found']) }}"

- name: Test one route
  uri:
    url: "https://{{ test_domain }}:{{ traefik_http_port }}"
    method: GET
    status_code: [200, 301, 302, 401, 404, 502, 503]
    timeout: 5
    validate_certs: false
  vars:
    test_domain: "{{ active_routes[0].rule | regex_replace('Host\\(`([^`]+)`\\)', '\\1') }}"
  register: test_result
  when: active_routes is defined and active_routes | length > 0
  ignore_errors: true

- name: Show connectivity test
  debug:
    msg:
      - ""
      - "🔗 CONNECTIVITY TEST"
      - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      - "URL: {{ test_result.url | default('N/A') }}"
      - "Status: {{ test_result.status | default('FAILED') }} {{ '✅' if test_result.status < 500 else '❌' }}"
      - "TLS: {{ '✅ HTTPS' if test_result.url is defined and test_result.url.startswith('https') else '❌ HTTP' }}"
  when: test_result is defined

- name: Check certificates
  stat:
    path: "{{ traefik_data_dir }}/acme/acme.json"
  register: certs

- name: Final summary
  debug:
    msg:
      - ""
      - "📊 SUMMARY"
      - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      - "Status: {{ '✅ HEALTHY' if api_check.status == 200 and active_routes | length > 0 else '⚠️ ISSUES' }}"
      - "Redis: {{ '✅ CONFIGURED' if (active_routes | selectattr('rule', 'search', 'redis-ui') | list | length > 0) else '❌ MISSING' }}"
      - "Certs: {{ '✅ READY' if certs.stat.exists else '❌ MISSING' }}"
      - ""
      - "💡 Test: curl -H 'Host: redis-ui.{{ domain }}' http://localhost:{{ traefik_http_port }}"
