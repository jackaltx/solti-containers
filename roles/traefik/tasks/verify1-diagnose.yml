---
# Simple debug version to understand API structure
# Usage: ./svc-exec.sh traefik verify

# ..................................................................................
# Basic Container Health
# ..................................................................................
- name: Verify Traefik pod is running
  command: podman pod ps --format {% raw %}"{{.Name}}"{% endraw %}
  register: pod_status
  failed_when: "'traefik' not in pod_status.stdout"
  changed_when: false

- name: Show pod status
  debug:
    var: pod_status.stdout_lines

- name: Verify Traefik container is running
  command: podman ps --format {% raw %}"{{.Names}}"{% endraw %} --filter "pod=traefik"
  register: container_status
  failed_when: "'traefik' not in container_status.stdout"
  changed_when: false

- name: Show container status
  debug:
    var: container_status.stdout_lines

# ..................................................................................
# API Health Check
# ..................................................................................
- name: Test Traefik API accessibility
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/version"
    method: GET
    status_code: 200
    timeout: 10
  register: api_version
  ignore_errors: true

- name: Display API status
  debug:
    msg:
      - "🌐 API Status: {{ '✅ ONLINE' if api_version.status == 200 else '❌ OFFLINE' }}"
      - "📍 Dashboard: http://localhost:{{ traefik_dashboard_port }}"
      - "🔧 Version: {{ api_version.json.Version if api_version.json is defined else 'Unknown' }}"

# ..................................................................................
# Get Raw API Data for Debugging
# ..................................................................................
- name: Get all HTTP routers (raw)
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/http/routers"
    method: GET
    status_code: 200
  register: routers_raw
  when: api_version.status == 200
  ignore_errors: true

- name: Debug routers data structure
  debug:
    msg: |
      🔍 ROUTERS API RESPONSE TYPE: {{ routers_raw.json | type_debug }}
      📊 ROUTERS COUNT: {{ routers_raw.json | length if routers_raw.json is iterable else 'not iterable' }}
      🗂️ FIRST ROUTER KEYS: {{ routers_raw.json[0].keys() | list if routers_raw.json and routers_raw.json | length > 0 else 'no routers' }}
  when: routers_raw.json is defined

- name: Get all HTTP services (raw)
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/http/services"
    method: GET
    status_code: 200
  register: services_raw
  when: api_version.status == 200
  ignore_errors: true

- name: Debug services data structure
  debug:
    msg: |
      🔍 SERVICES API RESPONSE TYPE: {{ services_raw.json | type_debug }}
      📊 SERVICES COUNT: {{ services_raw.json | length if services_raw.json is iterable else 'not iterable' }}
      🗂️ FIRST SERVICE KEYS: {{ services_raw.json[0].keys() | list if services_raw.json and services_raw.json | length > 0 else 'no services' }}
  when: services_raw.json is defined

- name: Get entrypoints (raw)
  uri:
    url: "http://localhost:{{ traefik_dashboard_port }}/api/entrypoints"
    method: GET
    status_code: 200
  register: entrypoints_raw
  when: api_version.status == 200
  ignore_errors: true

- name: Debug entrypoints data structure
  debug:
    msg: |
      🔍 ENTRYPOINTS API RESPONSE TYPE: {{ entrypoints_raw.json | type_debug }}
      📊 ENTRYPOINTS: {{ entrypoints_raw.json.keys() | list if entrypoints_raw.json is mapping else entrypoints_raw.json | length if entrypoints_raw.json is iterable else 'not iterable' }}
  when: entrypoints_raw.json is defined

# ..................................................................................
# Simple Routing Display
# ..................................................................................
- name: Display Simple Routing Info
  debug:
    msg: |
      ╔════════════════════════════════════════════════════════════════════════════════╗
      ║                        🚦 TRAEFIK ROUTING SUMMARY                             ║
      ╚════════════════════════════════════════════════════════════════════════════════╝

      📍 Dashboard: http://localhost:{{ traefik_dashboard_port }}
      🌐 Domain: {{ domain }}
      🔗 Network: {{ service_network }}

      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ 📊 DISCOVERED ROUTES                                                            │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {%- if routers_raw.json is defined and routers_raw.json | length > 0 %}
      {%- for router in routers_raw.json %}
      {%- if not router.name.startswith('api@') and not router.name.startswith('dashboard@') %}

      🔀 {{ router.name }}
         📏 Rule: {{ router.rule | default('No rule') }}
         🎯 Service: {{ router.service | default('No service') }}
         🔒 TLS: {{ '✅ Yes' if router.tls else '❌ No' }}
      {%- endif %}
      {%- endfor %}
      {%- else %}
      ❌ No routers found or API unavailable
      {%- endif %}

      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ ⚙️ BACKEND SERVICES                                                              │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {%- if services_raw.json is defined and services_raw.json | length > 0 %}
      {%- for service in services_raw.json %}
      {%- if not service.name.startswith('api@') and not service.name.startswith('dashboard@') %}

      ⚙️ {{ service.name }}
         💚 Status: {{ service.status | default('unknown') }}
         {%- if service.loadBalancer is defined and service.loadBalancer.servers is defined %}
         🖥️ Servers: {{ service.loadBalancer.servers | length }}
         {%- endif %}
      {%- endif %}
      {%- endfor %}
      {%- else %}
      ❌ No services found or API unavailable
      {%- endif %}

# ..................................................................................
# Network and Certificate Status
# ..................................................................................
- name: Check network configuration
  command: podman network inspect {{ service_network }}
  register: network_info
  changed_when: false
  ignore_errors: true

- name: Check ACME certificates
  stat:
    path: "{{ traefik_data_dir }}/acme/acme.json"
  register: acme_file

- name: Display final summary
  debug:
    msg: |
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ 📋 STATUS SUMMARY                                                               │
      └─────────────────────────────────────────────────────────────────────────────────┘

      🎯 Traefik: {{ '✅ RUNNING' if api_version.status == 200 else '❌ DOWN' }}
      🌐 Network: {{ '✅ EXISTS' if network_info.rc == 0 else '❌ MISSING' }}
      🔒 Certificates: {{ '✅ CONFIGURED' if acme_file.stat.exists else '❌ NOT FOUND' }}
      📊 Routes: {{ routers_raw.json | length if routers_raw.json is defined else 0 }}
      ⚙️ Services: {{ services_raw.json | length if services_raw.json is defined else 0 }}

      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ 🔧 USEFUL COMMANDS                                                              │
      └─────────────────────────────────────────────────────────────────────────────────┘

      # View dashboard:
      open http://localhost:{{ traefik_dashboard_port }}

      # Check raw API data:
      curl http://localhost:{{ traefik_dashboard_port }}/api/http/routers | jq .
      curl http://localhost:{{ traefik_dashboard_port }}/api/http/services | jq .

      # Monitor logs:
      podman logs -f traefik-svc
