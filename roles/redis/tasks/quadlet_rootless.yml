---
#
# ....................................................................................
- name: Create Redis pod Quadlet
  containers.podman.podman_pod:
    name: redis
    state: quadlet
    dns: "{{ service_dns_servers }}"
    dns_search: "{{ service_dns_search }}"
    network: "{{ service_network }}"
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    ports:
      - "127.0.0.1:{{ redis_port }}:6379"
      - "127.0.0.1:{{ redis_gui_port }}:8081"
    quadlet_options:
      - |
        [Service]
        Restart=always
      - |
        [Install]
        WantedBy=default.target

# ....................................................................................
- name: Create Redis server container Quadlet
  containers.podman.podman_container:
    name: redis-svc
    pod: redis.pod
    image: "{{ redis_image }}"
    state: quadlet
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    volume:
      - "{{ redis_data_dir }}/config:/usr/local/etc/redis:Z"
      - "{{ redis_data_dir }}/data:/data:Z"
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    quadlet_options:
      - |
        [Unit]
        Description=Redis Server Container
        After=network-online.target
      - |
        [Service]
        Restart=always
        TimeoutStartSec=300
        TimeoutStopSec=70
      - |
        [Install]
        WantedBy=default.target

# ....................................................................................
- name: Wait a moment for quadlet to be written
  ansible.builtin.wait_for:
    timeout: 10
# ....................................................................................
- name: Create Redis Commander container Quadlet
  when: redis_enable_gui | bool
  containers.podman.podman_container:
    name: redis-gui
    pod: redis.pod
    image: "{{ redis_commander_image }}"
    state: quadlet
    quadlet_dir: "{{ ansible_env.HOME }}/.config/containers/systemd"
    env:
      REDIS_HOSTS: "local:redis-svc:6379:0:{{ redis_password }}"
    quadlet_options:
      - "Label=traefik.enable=true"

      # API router (port 8081) - Explicit service binding
      - "Label=traefik.http.routers.redis.rule=Host(`redis-ui.{{ domain }}`)"
      - "Label=traefik.http.routers.redis.entrypoints=websecure"
      - "Label=traefik.http.routers.redis.service=minio-api"
      - "Label=traefik.http.services.redis.loadbalancer.server.port=8081"
      - "Label=traefik.http.routers.redis.middlewares=secHeaders@file,redirect-to-https@file"

      - |
        [Unit]
        Description=Redis Commander GUI Container
        After=network-online.target
      - |
        [Service]
        Restart=always
        TimeoutStartSec=300
        TimeoutStopSec=70
      - |
        [Install]
        WantedBy=default.target

#
# .......................................................................................
- name: reload systemd user daemon
  ansible.builtin.systemd:
    daemon_reload: yes
    scope: user

# .......................................................................................
- name: Enable and start rootless pod with systemd
  ansible.builtin.systemd:
    name: "{{ service_properties.name }}"
    state: started
    enabled: yes
    scope: user
